{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_define_property.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js"],"sourcesContent":["(function () {\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$2996f80ef42b8419(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$d60067ff2358eee8(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $cd5a47cf8ef6d766$export$1e71eb4bef00f6b0(obj, key, value) {\n    if (key in obj) Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n    });\n    else obj[key] = value;\n    return obj;\n}\n\n\nfunction $c3b10a83b523f372$export$79e617b1955a2616(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $c50969dc1df61e8b$export$7e0947b5ad3404e2(arr) {\n    if (Array.isArray(arr)) return (0, $c3b10a83b523f372$export$79e617b1955a2616)(arr);\n}\n\n\nfunction $09c9f293d010c0e1$export$1eb58a6e75231000(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n\nfunction $38c2d4931cb7a7c4$export$e6f3c4780d19eb2b() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $d4f69c5c6c4654b1$export$a5be06335b3a083c(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$79e617b1955a2616)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$79e617b1955a2616)(o, minLen);\n}\n\n\nfunction $227c6742e0ff6f82$export$1b5e630bc3aea29f(arr) {\n    return (0, $c50969dc1df61e8b$export$7e0947b5ad3404e2)(arr) || (0, $09c9f293d010c0e1$export$1eb58a6e75231000)(arr) || (0, $d4f69c5c6c4654b1$export$a5be06335b3a083c)(arr) || (0, $38c2d4931cb7a7c4$export$e6f3c4780d19eb2b)();\n}\n\n\n\"use strict\";\nvar $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game() {\n        var initialState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        (0, $8713978b2328d32b$export$2996f80ef42b8419)(this, Game);\n        this.size = 4;\n        this.score = 0;\n        this.status = Game.statuses.IDLE;\n        this.initialState = initialState;\n        this.state = initialState.map(function(row) {\n            return (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(row);\n        });\n    }\n    (0, $4fc75ccb937ab1df$export$d60067ff2358eee8)(Game, [\n        {\n            key: \"start\",\n            value: function start() {\n                this.addRandomTile();\n                this.addRandomTile();\n                this.status = Game.statuses.PLAYING;\n            }\n        },\n        {\n            key: \"restart\",\n            value: function restart() {\n                this.state = this.initialState.map(function(row) {\n                    return (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(row);\n                });\n                this.score = 0;\n                this.status = Game.statuses.IDLE;\n            }\n        },\n        {\n            key: \"addRandomTile\",\n            value: function addRandomTile() {\n                var emptyCells = [];\n                this.state.forEach(function(eachRow, rowIndex) {\n                    eachRow.forEach(function(cell, colIndex) {\n                        if (cell === 0) emptyCells.push({\n                            row: rowIndex,\n                            col: colIndex\n                        });\n                    });\n                });\n                if (emptyCells.length === 0) return;\n                var randomIndex = Math.floor(Math.random() * emptyCells.length);\n                var _emptyCells_randomIndex = emptyCells[randomIndex], row = _emptyCells_randomIndex.row, col = _emptyCells_randomIndex.col;\n                var newTileValue = Math.random() < 0.9 ? 2 : 4;\n                this.state[row][col] = newTileValue;\n            }\n        },\n        {\n            key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            key: \"getState\",\n            value: function getState() {\n                return this.state;\n            }\n        },\n        {\n            key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            key: \"updateScore\",\n            value: function updateScore(value) {\n                this.score = this.score + value;\n            }\n        },\n        {\n            key: \"boardsAreEqual\",\n            value: function boardsAreEqual(previousBoard, newBoard) {\n                for(var row = 0; row < previousBoard.length; row++)for(var col = 0; col < previousBoard[row].length; col++){\n                    if (previousBoard[row][col] !== newBoard[row][col]) return false;\n                }\n                return true;\n            }\n        },\n        {\n            key: \"checkStatus\",\n            value: function checkStatus() {\n                var canMove = false;\n                var hasEmptyCells = false;\n                for(var r = 0; r < 4; r++)for(var c = 0; c < 4; c++){\n                    if (this.state[r][c] === 2048) {\n                        this.status = Game.statuses.WIN;\n                        return;\n                    }\n                    if (this.state[r][c] === 0) hasEmptyCells = true;\n                    if (r < 3 && this.state[r][c] === this.state[r + 1][c] || c < 3 && this.state[r][c] === this.state[r][c + 1]) canMove = true;\n                }\n                if (!canMove && !hasEmptyCells) this.status = Game.statuses.LOSE;\n            }\n        },\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                if (this.status === Game.statuses.PLAYING) {\n                    var _this = this, _loop = function(row) {\n                        var movedRow = _this.state[row].filter(function(cell) {\n                            return cell !== 0;\n                        });\n                        while(movedRow.length < _this.size)movedRow.push(0);\n                        movedBoard.push(movedRow);\n                    }, _this1 = this, _loop1 = function(row1) {\n                        var nonZeroRow = movedBoard[row1].filter(function(cell) {\n                            return cell !== 0;\n                        });\n                        for(var i = 0; i < nonZeroRow.length; i++)if (nonZeroRow[i] === nonZeroRow[i + 1]) {\n                            nonZeroRow[i] *= 2;\n                            nonZeroRow.splice(i + 1, 1);\n                            _this1.updateScore(nonZeroRow[i]);\n                        }\n                        while(nonZeroRow.length < _this1.size)nonZeroRow.push(0);\n                        mergedBoard.push(nonZeroRow);\n                    };\n                    var previousState = this.state.map(function(row) {\n                        return (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(row);\n                    });\n                    var movedBoard = [];\n                    var mergedBoard = [];\n                    for(var row = 0; row < this.size; row++)_loop(row);\n                    for(var row1 = 0; row1 < this.size; row1++)_loop1(row1);\n                    if (!this.boardsAreEqual(previousState, mergedBoard)) {\n                        this.state = mergedBoard;\n                        this.addRandomTile();\n                        this.checkStatus();\n                    }\n                }\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                if (this.status === Game.statuses.PLAYING) {\n                    var _this = this, _loop = function(row) {\n                        var movedRow = _this.state[row].filter(function(cell) {\n                            return cell !== 0;\n                        });\n                        while(movedRow.length < _this.size)movedRow.unshift(0);\n                        movedBoard.push(movedRow);\n                    }, _this1 = this, _loop1 = function(row1) {\n                        var nonZeroRow = movedBoard[row1].filter(function(cell) {\n                            return cell !== 0;\n                        });\n                        for(var i = nonZeroRow.length - 1; i > 0; i--)if (nonZeroRow[i] === nonZeroRow[i - 1]) {\n                            nonZeroRow[i] *= 2;\n                            nonZeroRow.splice(i - 1, 1);\n                            nonZeroRow.unshift(0);\n                            _this1.updateScore(nonZeroRow[i]);\n                        }\n                        while(nonZeroRow.length < _this1.size)nonZeroRow.unshift(0);\n                        mergedBoard.push(nonZeroRow);\n                    };\n                    var previousState = this.state.map(function(row) {\n                        return (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(row);\n                    });\n                    var movedBoard = [];\n                    var mergedBoard = [];\n                    for(var row = 0; row < this.size; row++)_loop(row);\n                    for(var row1 = 0; row1 < this.size; row1++)_loop1(row1);\n                    if (!this.boardsAreEqual(previousState, mergedBoard)) {\n                        this.state = mergedBoard;\n                        this.addRandomTile();\n                        this.checkStatus();\n                    }\n                }\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                if (this.status === Game.statuses.PLAYING) {\n                    var previousState = this.state.map(function(row) {\n                        return (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(row);\n                    });\n                    for(var col = 0; col < this.size; col++){\n                        var newColumn = [];\n                        for(var row = 0; row < this.size; row++)if (this.state[row][col] !== 0) newColumn.push(this.state[row][col]);\n                        while(newColumn.length < this.size)newColumn.push(0);\n                        for(var row1 = 0; row1 < this.size; row1++)this.state[row1][col] = newColumn[row1];\n                    }\n                    for(var col1 = 0; col1 < this.size; col1++){\n                        var newColumn1 = [];\n                        var row2 = 0;\n                        while(row2 < this.size)if (row2 < this.size - 1 && this.state[row2][col1] === this.state[row2 + 1][col1]) {\n                            newColumn1.push(this.state[row2][col1] * 2);\n                            this.updateScore(this.state[row2][col1] * 2);\n                            row2 += 2;\n                        } else {\n                            newColumn1.push(this.state[row2][col1]);\n                            row2++;\n                        }\n                        while(newColumn1.length < this.size)newColumn1.push(0);\n                        for(var r = 0; r < this.size; r++)this.state[r][col1] = newColumn1[r];\n                    }\n                    if (!this.boardsAreEqual(previousState, this.state)) {\n                        this.addRandomTile();\n                        this.checkStatus();\n                    }\n                }\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                if (this.status === Game.statuses.PLAYING) {\n                    var previousState = this.state.map(function(row) {\n                        return (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(row);\n                    });\n                    for(var col = 0; col < this.size; col++){\n                        var newColumn = [];\n                        for(var row = 0; row < this.size; row++)if (this.state[row][col] !== 0) newColumn.push(this.state[row][col]);\n                        while(newColumn.length < this.size)newColumn.unshift(0);\n                        for(var row1 = 0; row1 < this.size; row1++)this.state[row1][col] = newColumn[row1];\n                    }\n                    for(var col1 = 0; col1 < this.size; col1++){\n                        var newColumn1 = [];\n                        var row2 = this.size - 1;\n                        while(row2 >= 0)if (row2 > 0 && this.state[row2][col1] === this.state[row2 - 1][col1]) {\n                            newColumn1.unshift(this.state[row2][col1] * 2);\n                            this.updateScore(this.state[row2][col1] * 2);\n                            row2 -= 2;\n                        } else {\n                            newColumn1.unshift(this.state[row2][col1]);\n                            row2--;\n                        }\n                        while(newColumn1.length < this.size)newColumn1.unshift(0);\n                        for(var r = 0; r < this.size; r++)this.state[r][col1] = newColumn1[r];\n                    }\n                    if (!this.boardsAreEqual(previousState, this.state)) {\n                        this.addRandomTile();\n                        this.checkStatus();\n                    }\n                }\n            }\n        }\n    ]);\n    return Game;\n}();\n(0, $cd5a47cf8ef6d766$export$1e71eb4bef00f6b0)($3d28d7f1aac198f5$var$Game, \"statuses\", {\n    IDLE: \"idle\",\n    PLAYING: \"playing\",\n    WIN: \"win\",\n    LOSE: \"lose\"\n});\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\n\"use strict\";\nvar $197cd56b15c33885$var$game = new (0, (/*@__PURE__*/$parcel$interopDefault($3d28d7f1aac198f5$exports)))();\nfunction $197cd56b15c33885$var$updateBoard() {\n    var gameField = document.querySelector(\".game-field\");\n    gameField.innerHTML = \"\";\n    $197cd56b15c33885$var$game.getState().forEach(function(row) {\n        var rowElement = document.createElement(\"tr\");\n        rowElement.classList.add(\"field-row\");\n        row.forEach(function(cell) {\n            var cellElement = document.createElement(\"td\");\n            cellElement.classList.add(\"field-cell\");\n            if (cell > 0) cellElement.classList.add(\"field-cell--\".concat(cell));\n            cellElement.textContent = cell !== 0 ? cell : \"\";\n            rowElement.appendChild(cellElement);\n        });\n        gameField.appendChild(rowElement);\n    });\n}\nfunction $197cd56b15c33885$var$updateScore() {\n    $197cd56b15c33885$var$gameScore.innerHTML = $197cd56b15c33885$var$game.getScore();\n}\nfunction $197cd56b15c33885$var$updateStatus() {\n    if ($197cd56b15c33885$var$game.getStatus() === (0, (/*@__PURE__*/$parcel$interopDefault($3d28d7f1aac198f5$exports))).statuses.WIN) $197cd56b15c33885$var$messageWin.classList.remove(\"hidden\");\n    else if ($197cd56b15c33885$var$game.getStatus() === (0, (/*@__PURE__*/$parcel$interopDefault($3d28d7f1aac198f5$exports))).statuses.LOSE) $197cd56b15c33885$var$messageLose.classList.remove(\"hidden\");\n}\nvar $197cd56b15c33885$var$button = document.querySelector(\".button\");\nvar $197cd56b15c33885$var$messageStart = document.querySelector(\".message-start\");\nvar $197cd56b15c33885$var$messageLose = document.querySelector(\".message-lose\");\nvar $197cd56b15c33885$var$messageWin = document.querySelector(\".message-win\");\nvar $197cd56b15c33885$var$gameScore = document.querySelector(\".game-score\");\n$197cd56b15c33885$var$button.addEventListener(\"click\", function() {\n    if ($197cd56b15c33885$var$button.classList.contains(\"start\")) {\n        $197cd56b15c33885$var$game.start();\n        $197cd56b15c33885$var$updateBoard();\n        $197cd56b15c33885$var$updateScore();\n        $197cd56b15c33885$var$button.classList.remove(\"start\");\n        $197cd56b15c33885$var$button.classList.add(\"restart\");\n        $197cd56b15c33885$var$button.textContent = \"Restart\";\n        $197cd56b15c33885$var$messageStart.classList.add(\"hidden\");\n    } else if ($197cd56b15c33885$var$button.classList.contains(\"restart\")) {\n        $197cd56b15c33885$var$button.classList.remove(\"restart\");\n        $197cd56b15c33885$var$button.classList.add(\"start\");\n        $197cd56b15c33885$var$button.textContent = \"Start\";\n        $197cd56b15c33885$var$messageLose.classList.add(\"hidden\");\n        $197cd56b15c33885$var$game.restart();\n        $197cd56b15c33885$var$updateBoard();\n        $197cd56b15c33885$var$updateScore();\n    }\n});\ndocument.addEventListener(\"keydown\", function(e) {\n    e.preventDefault();\n    switch(e.key){\n        case \"ArrowUp\":\n            $197cd56b15c33885$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $197cd56b15c33885$var$game.moveDown();\n            break;\n        case \"ArrowRight\":\n            $197cd56b15c33885$var$game.moveRight();\n            break;\n        case \"ArrowLeft\":\n            $197cd56b15c33885$var$game.moveLeft();\n            break;\n    }\n    $197cd56b15c33885$var$updateScore();\n    $197cd56b15c33885$var$updateBoard();\n    $197cd56b15c33885$var$updateStatus();\n});\n\n})();\n//# sourceMappingURL=index.a70fbc41.js.map\n","'use strict';\n\n// const Game = require('../modules/Game.class');\nimport Game from '../modules/Game.class.js';\n\nconst game = new Game();\n\nfunction updateBoard() {\n  const gameField = document.querySelector('.game-field');\n\n  gameField.innerHTML = '';\n\n  game.getState().forEach((row) => {\n    const rowElement = document.createElement('tr');\n\n    rowElement.classList.add('field-row');\n\n    row.forEach((cell) => {\n      const cellElement = document.createElement('td');\n\n      cellElement.classList.add('field-cell');\n\n      if (cell > 0) {\n        cellElement.classList.add(`field-cell--${cell}`);\n      }\n      cellElement.textContent = cell !== 0 ? cell : '';\n      rowElement.appendChild(cellElement);\n    });\n\n    gameField.appendChild(rowElement);\n  });\n}\n\nfunction updateScore() {\n  gameScore.innerHTML = game.getScore();\n}\n\nfunction updateStatus() {\n  if (game.getStatus() === Game.statuses.WIN) {\n    messageWin.classList.remove('hidden');\n  } else if (game.getStatus() === Game.statuses.LOSE) {\n    messageLose.classList.remove('hidden');\n  }\n}\n\nconst button = document.querySelector('.button');\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst gameScore = document.querySelector('.game-score');\n\nbutton.addEventListener('click', () => {\n  if (button.classList.contains('start')) {\n    game.start();\n    updateBoard();\n    updateScore();\n\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.textContent = 'Restart';\n\n    messageStart.classList.add('hidden');\n  } else if (button.classList.contains('restart')) {\n    button.classList.remove('restart');\n    button.classList.add('start');\n    button.textContent = 'Start';\n    messageLose.classList.add('hidden');\n    game.restart();\n    updateBoard();\n    updateScore();\n  }\n});\n\ndocument.addEventListener('keydown', (e) => {\n  e.preventDefault();\n\n  switch (e.key) {\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n  }\n\n  updateScore();\n  updateBoard();\n  updateStatus();\n});\n","'use strict';\n\nclass Game {\n  static statuses = {\n    IDLE: 'idle',\n    PLAYING: 'playing',\n    WIN: 'win',\n    LOSE: 'lose',\n  };\n\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.size = 4;\n    this.score = 0;\n    this.status = Game.statuses.IDLE;\n    this.initialState = initialState;\n    this.state = initialState.map((row) => [...row]);\n  }\n\n  start() {\n    this.addRandomTile();\n    this.addRandomTile();\n    this.status = Game.statuses.PLAYING;\n  }\n\n  restart() {\n    this.state = this.initialState.map((row) => [...row]);\n    this.score = 0;\n    this.status = Game.statuses.IDLE;\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    this.state.forEach((eachRow, rowIndex) => {\n      eachRow.forEach((cell, colIndex) => {\n        if (cell === 0) {\n          emptyCells.push({ row: rowIndex, col: colIndex });\n        }\n      });\n    });\n\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    const randomIndex = Math.floor(Math.random() * emptyCells.length);\n    const { row, col } = emptyCells[randomIndex];\n\n    const newTileValue = Math.random() < 0.9 ? 2 : 4;\n\n    this.state[row][col] = newTileValue;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  updateScore(value) {\n    this.score = this.score + value;\n  }\n\n  boardsAreEqual(previousBoard, newBoard) {\n    for (let row = 0; row < previousBoard.length; row++) {\n      for (let col = 0; col < previousBoard[row].length; col++) {\n        if (previousBoard[row][col] !== newBoard[row][col]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  checkStatus() {\n    let canMove = false;\n    let hasEmptyCells = false;\n\n    for (let r = 0; r < 4; r++) {\n      for (let c = 0; c < 4; c++) {\n        if (this.state[r][c] === 2048) {\n          this.status = Game.statuses.WIN;\n\n          return;\n        }\n\n        if (this.state[r][c] === 0) {\n          hasEmptyCells = true;\n        }\n\n        if (\n          (r < 3 && this.state[r][c] === this.state[r + 1][c]) ||\n          (c < 3 && this.state[r][c] === this.state[r][c + 1])\n        ) {\n          canMove = true;\n        }\n      }\n    }\n\n    if (!canMove && !hasEmptyCells) {\n      this.status = Game.statuses.LOSE;\n    }\n  }\n\n  moveLeft() {\n    if (this.status === Game.statuses.PLAYING) {\n      const previousState = this.state.map((row) => [...row]);\n\n      const movedBoard = [];\n      const mergedBoard = [];\n\n      for (let row = 0; row < this.size; row++) {\n        const movedRow = this.state[row].filter((cell) => cell !== 0);\n\n        while (movedRow.length < this.size) {\n          movedRow.push(0);\n        }\n        movedBoard.push(movedRow);\n      }\n\n      for (let row = 0; row < this.size; row++) {\n        const nonZeroRow = movedBoard[row].filter((cell) => cell !== 0);\n\n        for (let i = 0; i < nonZeroRow.length; i++) {\n          if (nonZeroRow[i] === nonZeroRow[i + 1]) {\n            nonZeroRow[i] *= 2;\n            nonZeroRow.splice(i + 1, 1);\n            this.updateScore(nonZeroRow[i]);\n          }\n        }\n\n        while (nonZeroRow.length < this.size) {\n          nonZeroRow.push(0);\n        }\n        mergedBoard.push(nonZeroRow);\n      }\n\n      if (!this.boardsAreEqual(previousState, mergedBoard)) {\n        this.state = mergedBoard;\n        this.addRandomTile();\n        this.checkStatus();\n      }\n    }\n  }\n\n  moveRight() {\n    if (this.status === Game.statuses.PLAYING) {\n      const previousState = this.state.map((row) => [...row]);\n      const movedBoard = [];\n      const mergedBoard = [];\n\n      for (let row = 0; row < this.size; row++) {\n        const movedRow = this.state[row].filter((cell) => cell !== 0);\n\n        while (movedRow.length < this.size) {\n          movedRow.unshift(0);\n        }\n        movedBoard.push(movedRow);\n      }\n\n      for (let row = 0; row < this.size; row++) {\n        const nonZeroRow = movedBoard[row].filter((cell) => cell !== 0);\n\n        for (let i = nonZeroRow.length - 1; i > 0; i--) {\n          if (nonZeroRow[i] === nonZeroRow[i - 1]) {\n            nonZeroRow[i] *= 2;\n            nonZeroRow.splice(i - 1, 1);\n            nonZeroRow.unshift(0);\n            this.updateScore(nonZeroRow[i]);\n          }\n        }\n\n        while (nonZeroRow.length < this.size) {\n          nonZeroRow.unshift(0);\n        }\n        mergedBoard.push(nonZeroRow);\n      }\n\n      if (!this.boardsAreEqual(previousState, mergedBoard)) {\n        this.state = mergedBoard;\n        this.addRandomTile();\n        this.checkStatus();\n      }\n    }\n  }\n\n  moveUp() {\n    if (this.status === Game.statuses.PLAYING) {\n      const previousState = this.state.map((row) => [...row]);\n\n      for (let col = 0; col < this.size; col++) {\n        const newColumn = [];\n\n        for (let row = 0; row < this.size; row++) {\n          if (this.state[row][col] !== 0) {\n            newColumn.push(this.state[row][col]);\n          }\n        }\n\n        while (newColumn.length < this.size) {\n          newColumn.push(0);\n        }\n\n        for (let row = 0; row < this.size; row++) {\n          this.state[row][col] = newColumn[row];\n        }\n      }\n\n      for (let col = 0; col < this.size; col++) {\n        const newColumn = [];\n        let row = 0;\n\n        while (row < this.size) {\n          if (\n            row < this.size - 1 &&\n            this.state[row][col] === this.state[row + 1][col]\n          ) {\n            newColumn.push(this.state[row][col] * 2);\n            this.updateScore(this.state[row][col] * 2);\n            row += 2;\n          } else {\n            newColumn.push(this.state[row][col]);\n            row++;\n          }\n        }\n\n        while (newColumn.length < this.size) {\n          newColumn.push(0);\n        }\n\n        for (let r = 0; r < this.size; r++) {\n          this.state[r][col] = newColumn[r];\n        }\n      }\n\n      if (!this.boardsAreEqual(previousState, this.state)) {\n        this.addRandomTile();\n        this.checkStatus();\n      }\n    }\n  }\n\n  moveDown() {\n    if (this.status === Game.statuses.PLAYING) {\n      const previousState = this.state.map((row) => [...row]);\n\n      for (let col = 0; col < this.size; col++) {\n        const newColumn = [];\n\n        for (let row = 0; row < this.size; row++) {\n          if (this.state[row][col] !== 0) {\n            newColumn.push(this.state[row][col]);\n          }\n        }\n\n        while (newColumn.length < this.size) {\n          newColumn.unshift(0);\n        }\n\n        for (let row = 0; row < this.size; row++) {\n          this.state[row][col] = newColumn[row];\n        }\n      }\n\n      for (let col = 0; col < this.size; col++) {\n        const newColumn = [];\n        let row = this.size - 1;\n\n        while (row >= 0) {\n          if (row > 0 && this.state[row][col] === this.state[row - 1][col]) {\n            newColumn.unshift(this.state[row][col] * 2);\n            this.updateScore(this.state[row][col] * 2);\n            row -= 2;\n          } else {\n            newColumn.unshift(this.state[row][col]);\n            row--;\n          }\n        }\n\n        while (newColumn.length < this.size) {\n          newColumn.unshift(0);\n        }\n\n        for (let r = 0; r < this.size; r++) {\n          this.state[r][col] = newColumn[r];\n        }\n      }\n\n      if (!this.boardsAreEqual(previousState, this.state)) {\n        this.addRandomTile();\n        this.checkStatus();\n      }\n    }\n  }\n}\n\nmodule.exports = Game;\n","export function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nexport function _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","export function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });\n    } else obj[key] = value;\n\n    return obj;\n}\nexport { _define_property as _ };\n","import { _array_without_holes } from \"./_array_without_holes.js\";\nimport { _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nexport function _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","export function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","export function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","export function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n"],"names":["$parcel$interopDefault","a","__esModule","default","key","value","$3d28d7f1aac198f5$exports","$c3b10a83b523f372$export$79e617b1955a2616","arr","len","length","i","arr2","Array","$227c6742e0ff6f82$export$1b5e630bc3aea29f","isArray","iter","Symbol","iterator","from","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","TypeError","$3d28d7f1aac198f5$var$Game","protoProps","Game","initialState","arguments","instance","Constructor","size","score","status","statuses","IDLE","state","map","row","addRandomTile","PLAYING","emptyCells","forEach","eachRow","rowIndex","cell","colIndex","push","col","randomIndex","Math","floor","random","_emptyCells_randomIndex","previousBoard","newBoard","canMove","hasEmptyCells","r","c","WIN","LOSE","_this","_this1","previousState","movedBoard","mergedBoard","_loop","movedRow","filter","row1","_loop1","nonZeroRow","splice","updateScore","boardsAreEqual","checkStatus","unshift","newColumn","col1","newColumn1","row2","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","obj","$197cd56b15c33885$var$game","$197cd56b15c33885$var$updateBoard","gameField","document","querySelector","innerHTML","getState","rowElement","createElement","classList","add","cellElement","concat","textContent","appendChild","$197cd56b15c33885$var$updateScore","$197cd56b15c33885$var$gameScore","getScore","$197cd56b15c33885$var$button","$197cd56b15c33885$var$messageStart","$197cd56b15c33885$var$messageLose","$197cd56b15c33885$var$messageWin","addEventListener","contains","start","remove","restart","e","preventDefault","moveUp","moveDown","moveRight","moveLeft","getStatus"],"version":3,"file":"index.a70fbc41.js.map"}