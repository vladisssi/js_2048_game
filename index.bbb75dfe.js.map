{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    static statuses = {\n        IDLE: \"idle\",\n        PLAYING: \"playing\",\n        WIN: \"win\",\n        LOSE: \"lose\"\n    };\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.size = 4;\n        this.score = 0;\n        this.status = $a5fd07fa01589658$var$Game.statuses.IDLE;\n        this.initialState = initialState;\n        this.state = initialState.map((row)=>[\n                ...row\n            ]);\n    }\n    start() {\n        this.addRandomTile();\n        this.addRandomTile();\n        this.status = $a5fd07fa01589658$var$Game.statuses.PLAYING;\n    }\n    restart() {\n        this.state = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.score = 0;\n        this.status = $a5fd07fa01589658$var$Game.statuses.IDLE;\n    }\n    addRandomTile() {\n        const emptyCells = [];\n        this.state.forEach((eachRow, rowIndex)=>{\n            eachRow.forEach((cell, colIndex)=>{\n                if (cell === 0) emptyCells.push({\n                    row: rowIndex,\n                    col: colIndex\n                });\n            });\n        });\n        if (emptyCells.length === 0) return;\n        const randomIndex = Math.floor(Math.random() * emptyCells.length);\n        const { row: row, col: col } = emptyCells[randomIndex];\n        const newTileValue = Math.random() < 0.9 ? 2 : 4;\n        this.state[row][col] = newTileValue;\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.state;\n    }\n    getStatus() {\n        return this.status;\n    }\n    updateScore(value) {\n        this.score = this.score + value;\n    }\n    boardsAreEqual(previousBoard, newBoard) {\n        for(let row = 0; row < previousBoard.length; row++)for(let col = 0; col < previousBoard[row].length; col++){\n            if (previousBoard[row][col] !== newBoard[row][col]) return false;\n        }\n        return true;\n    }\n    checkStatus() {\n        let canMove = false;\n        let hasEmptyCells = false;\n        for(let r = 0; r < 4; r++)for(let c = 0; c < 4; c++){\n            if (this.state[r][c] === 2048) {\n                this.status = $a5fd07fa01589658$var$Game.statuses.WIN;\n                return;\n            }\n            if (this.state[r][c] === 0) hasEmptyCells = true;\n            if (r < 3 && this.state[r][c] === this.state[r + 1][c] || c < 3 && this.state[r][c] === this.state[r][c + 1]) canMove = true;\n        }\n        if (!canMove && !hasEmptyCells) this.status = $a5fd07fa01589658$var$Game.statuses.LOSE;\n    }\n    moveLeft() {\n        if (this.status === $a5fd07fa01589658$var$Game.statuses.PLAYING) {\n            const previousState = this.state.map((row)=>[\n                    ...row\n                ]);\n            const movedBoard = [];\n            const mergedBoard = [];\n            for(let row = 0; row < this.size; row++){\n                const movedRow = this.state[row].filter((cell)=>cell !== 0);\n                while(movedRow.length < this.size)movedRow.push(0);\n                movedBoard.push(movedRow);\n            }\n            for(let row = 0; row < this.size; row++){\n                const nonZeroRow = movedBoard[row].filter((cell)=>cell !== 0);\n                for(let i = 0; i < nonZeroRow.length; i++)if (nonZeroRow[i] === nonZeroRow[i + 1]) {\n                    nonZeroRow[i] *= 2;\n                    nonZeroRow.splice(i + 1, 1);\n                    this.updateScore(nonZeroRow[i]);\n                }\n                while(nonZeroRow.length < this.size)nonZeroRow.push(0);\n                mergedBoard.push(nonZeroRow);\n            }\n            if (!this.boardsAreEqual(previousState, mergedBoard)) {\n                this.state = mergedBoard;\n                this.addRandomTile();\n                this.checkStatus();\n            }\n        }\n    }\n    moveRight() {\n        if (this.status === $a5fd07fa01589658$var$Game.statuses.PLAYING) {\n            const previousState = this.state.map((row)=>[\n                    ...row\n                ]);\n            const movedBoard = [];\n            const mergedBoard = [];\n            for(let row = 0; row < this.size; row++){\n                const movedRow = this.state[row].filter((cell)=>cell !== 0);\n                while(movedRow.length < this.size)movedRow.unshift(0);\n                movedBoard.push(movedRow);\n            }\n            for(let row = 0; row < this.size; row++){\n                const nonZeroRow = movedBoard[row].filter((cell)=>cell !== 0);\n                for(let i = nonZeroRow.length - 1; i > 0; i--)if (nonZeroRow[i] === nonZeroRow[i - 1]) {\n                    nonZeroRow[i] *= 2;\n                    nonZeroRow.splice(i - 1, 1);\n                    nonZeroRow.unshift(0);\n                    this.updateScore(nonZeroRow[i]);\n                }\n                while(nonZeroRow.length < this.size)nonZeroRow.unshift(0);\n                mergedBoard.push(nonZeroRow);\n            }\n            if (!this.boardsAreEqual(previousState, mergedBoard)) {\n                this.state = mergedBoard;\n                this.addRandomTile();\n                this.checkStatus();\n            }\n        }\n    }\n    moveUp() {\n        if (this.status === $a5fd07fa01589658$var$Game.statuses.PLAYING) {\n            const previousState = this.state.map((row)=>[\n                    ...row\n                ]);\n            for(let col = 0; col < this.size; col++){\n                const newColumn = [];\n                for(let row = 0; row < this.size; row++)if (this.state[row][col] !== 0) newColumn.push(this.state[row][col]);\n                while(newColumn.length < this.size)newColumn.push(0);\n                for(let row = 0; row < this.size; row++)this.state[row][col] = newColumn[row];\n            }\n            for(let col = 0; col < this.size; col++){\n                const newColumn = [];\n                let row = 0;\n                while(row < this.size)if (row < this.size - 1 && this.state[row][col] === this.state[row + 1][col]) {\n                    newColumn.push(this.state[row][col] * 2);\n                    this.updateScore(this.state[row][col] * 2);\n                    row += 2;\n                } else {\n                    newColumn.push(this.state[row][col]);\n                    row++;\n                }\n                while(newColumn.length < this.size)newColumn.push(0);\n                for(let r = 0; r < this.size; r++)this.state[r][col] = newColumn[r];\n            }\n            if (!this.boardsAreEqual(previousState, this.state)) {\n                this.addRandomTile();\n                this.checkStatus();\n            }\n        }\n    }\n    moveDown() {\n        if (this.status === $a5fd07fa01589658$var$Game.statuses.PLAYING) {\n            const previousState = this.state.map((row)=>[\n                    ...row\n                ]);\n            for(let col = 0; col < this.size; col++){\n                const newColumn = [];\n                for(let row = 0; row < this.size; row++)if (this.state[row][col] !== 0) newColumn.push(this.state[row][col]);\n                while(newColumn.length < this.size)newColumn.unshift(0);\n                for(let row = 0; row < this.size; row++)this.state[row][col] = newColumn[row];\n            }\n            for(let col = 0; col < this.size; col++){\n                const newColumn = [];\n                let row = this.size - 1;\n                while(row >= 0)if (row > 0 && this.state[row][col] === this.state[row - 1][col]) {\n                    newColumn.unshift(this.state[row][col] * 2);\n                    this.updateScore(this.state[row][col] * 2);\n                    row -= 2;\n                } else {\n                    newColumn.unshift(this.state[row][col]);\n                    row--;\n                }\n                while(newColumn.length < this.size)newColumn.unshift(0);\n                for(let r = 0; r < this.size; r++)this.state[r][col] = newColumn[r];\n            }\n            if (!this.boardsAreEqual(previousState, this.state)) {\n                this.addRandomTile();\n                this.checkStatus();\n            }\n        }\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\n\"use strict\";\nconst $09e991522ca7e64e$var$game = new (0, (/*@__PURE__*/$parcel$interopDefault($a5fd07fa01589658$exports)))();\nfunction $09e991522ca7e64e$var$updateBoard() {\n    const gameField = document.querySelector(\".game-field\");\n    gameField.innerHTML = \"\";\n    $09e991522ca7e64e$var$game.getState().forEach((row)=>{\n        const rowElement = document.createElement(\"tr\");\n        rowElement.classList.add(\"field-row\");\n        row.forEach((cell)=>{\n            const cellElement = document.createElement(\"td\");\n            cellElement.classList.add(\"field-cell\");\n            if (cell > 0) cellElement.classList.add(`field-cell--${cell}`);\n            cellElement.textContent = cell !== 0 ? cell : \"\";\n            rowElement.appendChild(cellElement);\n        });\n        gameField.appendChild(rowElement);\n    });\n}\nfunction $09e991522ca7e64e$var$updateScore() {\n    $09e991522ca7e64e$var$gameScore.innerHTML = $09e991522ca7e64e$var$game.getScore();\n}\nfunction $09e991522ca7e64e$var$updateStatus() {\n    if ($09e991522ca7e64e$var$game.getStatus() === (0, (/*@__PURE__*/$parcel$interopDefault($a5fd07fa01589658$exports))).statuses.WIN) $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n    else if ($09e991522ca7e64e$var$game.getStatus() === (0, (/*@__PURE__*/$parcel$interopDefault($a5fd07fa01589658$exports))).statuses.LOSE) $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n}\nconst $09e991522ca7e64e$var$button = document.querySelector(\".button\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$gameScore = document.querySelector(\".game-score\");\n$09e991522ca7e64e$var$button.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$button.classList.contains(\"start\")) {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$updateBoard();\n        $09e991522ca7e64e$var$updateScore();\n        $09e991522ca7e64e$var$button.classList.remove(\"start\");\n        $09e991522ca7e64e$var$button.classList.add(\"restart\");\n        $09e991522ca7e64e$var$button.textContent = \"Restart\";\n        $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n    } else if ($09e991522ca7e64e$var$button.classList.contains(\"restart\")) {\n        $09e991522ca7e64e$var$button.classList.remove(\"restart\");\n        $09e991522ca7e64e$var$button.classList.add(\"start\");\n        $09e991522ca7e64e$var$button.textContent = \"Start\";\n        $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$updateBoard();\n        $09e991522ca7e64e$var$updateScore();\n    }\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    e.preventDefault();\n    switch(e.key){\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n    }\n    $09e991522ca7e64e$var$updateScore();\n    $09e991522ca7e64e$var$updateBoard();\n    $09e991522ca7e64e$var$updateStatus();\n});\n\n\n//# sourceMappingURL=index.bbb75dfe.js.map\n","'use strict';\n\n// const Game = require('../modules/Game.class');\nimport Game from '../modules/Game.class.js';\n\nconst game = new Game();\n\nfunction updateBoard() {\n  const gameField = document.querySelector('.game-field');\n\n  gameField.innerHTML = '';\n\n  game.getState().forEach((row) => {\n    const rowElement = document.createElement('tr');\n\n    rowElement.classList.add('field-row');\n\n    row.forEach((cell) => {\n      const cellElement = document.createElement('td');\n\n      cellElement.classList.add('field-cell');\n\n      if (cell > 0) {\n        cellElement.classList.add(`field-cell--${cell}`);\n      }\n      cellElement.textContent = cell !== 0 ? cell : '';\n      rowElement.appendChild(cellElement);\n    });\n\n    gameField.appendChild(rowElement);\n  });\n}\n\nfunction updateScore() {\n  gameScore.innerHTML = game.getScore();\n}\n\nfunction updateStatus() {\n  if (game.getStatus() === Game.statuses.WIN) {\n    messageWin.classList.remove('hidden');\n  } else if (game.getStatus() === Game.statuses.LOSE) {\n    messageLose.classList.remove('hidden');\n  }\n}\n\nconst button = document.querySelector('.button');\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst gameScore = document.querySelector('.game-score');\n\nbutton.addEventListener('click', () => {\n  if (button.classList.contains('start')) {\n    game.start();\n    updateBoard();\n    updateScore();\n\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.textContent = 'Restart';\n\n    messageStart.classList.add('hidden');\n  } else if (button.classList.contains('restart')) {\n    button.classList.remove('restart');\n    button.classList.add('start');\n    button.textContent = 'Start';\n    messageLose.classList.add('hidden');\n    game.restart();\n    updateBoard();\n    updateScore();\n  }\n});\n\ndocument.addEventListener('keydown', (e) => {\n  e.preventDefault();\n\n  switch (e.key) {\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n  }\n\n  updateScore();\n  updateBoard();\n  updateStatus();\n});\n","'use strict';\n\nclass Game {\n  static statuses = {\n    IDLE: 'idle',\n    PLAYING: 'playing',\n    WIN: 'win',\n    LOSE: 'lose',\n  };\n\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.size = 4;\n    this.score = 0;\n    this.status = Game.statuses.IDLE;\n    this.initialState = initialState;\n    this.state = initialState.map((row) => [...row]);\n  }\n\n  start() {\n    this.addRandomTile();\n    this.addRandomTile();\n    this.status = Game.statuses.PLAYING;\n  }\n\n  restart() {\n    this.state = this.initialState.map((row) => [...row]);\n    this.score = 0;\n    this.status = Game.statuses.IDLE;\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    this.state.forEach((eachRow, rowIndex) => {\n      eachRow.forEach((cell, colIndex) => {\n        if (cell === 0) {\n          emptyCells.push({ row: rowIndex, col: colIndex });\n        }\n      });\n    });\n\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    const randomIndex = Math.floor(Math.random() * emptyCells.length);\n    const { row, col } = emptyCells[randomIndex];\n\n    const newTileValue = Math.random() < 0.9 ? 2 : 4;\n\n    this.state[row][col] = newTileValue;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  updateScore(value) {\n    this.score = this.score + value;\n  }\n\n  boardsAreEqual(previousBoard, newBoard) {\n    for (let row = 0; row < previousBoard.length; row++) {\n      for (let col = 0; col < previousBoard[row].length; col++) {\n        if (previousBoard[row][col] !== newBoard[row][col]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  checkStatus() {\n    let canMove = false;\n    let hasEmptyCells = false;\n\n    for (let r = 0; r < 4; r++) {\n      for (let c = 0; c < 4; c++) {\n        if (this.state[r][c] === 2048) {\n          this.status = Game.statuses.WIN;\n\n          return;\n        }\n\n        if (this.state[r][c] === 0) {\n          hasEmptyCells = true;\n        }\n\n        if (\n          (r < 3 && this.state[r][c] === this.state[r + 1][c]) ||\n          (c < 3 && this.state[r][c] === this.state[r][c + 1])\n        ) {\n          canMove = true;\n        }\n      }\n    }\n\n    if (!canMove && !hasEmptyCells) {\n      this.status = Game.statuses.LOSE;\n    }\n  }\n\n  moveLeft() {\n    if (this.status === Game.statuses.PLAYING) {\n      const previousState = this.state.map((row) => [...row]);\n\n      const movedBoard = [];\n      const mergedBoard = [];\n\n      for (let row = 0; row < this.size; row++) {\n        const movedRow = this.state[row].filter((cell) => cell !== 0);\n\n        while (movedRow.length < this.size) {\n          movedRow.push(0);\n        }\n        movedBoard.push(movedRow);\n      }\n\n      for (let row = 0; row < this.size; row++) {\n        const nonZeroRow = movedBoard[row].filter((cell) => cell !== 0);\n\n        for (let i = 0; i < nonZeroRow.length; i++) {\n          if (nonZeroRow[i] === nonZeroRow[i + 1]) {\n            nonZeroRow[i] *= 2;\n            nonZeroRow.splice(i + 1, 1);\n            this.updateScore(nonZeroRow[i]);\n          }\n        }\n\n        while (nonZeroRow.length < this.size) {\n          nonZeroRow.push(0);\n        }\n        mergedBoard.push(nonZeroRow);\n      }\n\n      if (!this.boardsAreEqual(previousState, mergedBoard)) {\n        this.state = mergedBoard;\n        this.addRandomTile();\n        this.checkStatus();\n      }\n    }\n  }\n\n  moveRight() {\n    if (this.status === Game.statuses.PLAYING) {\n      const previousState = this.state.map((row) => [...row]);\n      const movedBoard = [];\n      const mergedBoard = [];\n\n      for (let row = 0; row < this.size; row++) {\n        const movedRow = this.state[row].filter((cell) => cell !== 0);\n\n        while (movedRow.length < this.size) {\n          movedRow.unshift(0);\n        }\n        movedBoard.push(movedRow);\n      }\n\n      for (let row = 0; row < this.size; row++) {\n        const nonZeroRow = movedBoard[row].filter((cell) => cell !== 0);\n\n        for (let i = nonZeroRow.length - 1; i > 0; i--) {\n          if (nonZeroRow[i] === nonZeroRow[i - 1]) {\n            nonZeroRow[i] *= 2;\n            nonZeroRow.splice(i - 1, 1);\n            nonZeroRow.unshift(0);\n            this.updateScore(nonZeroRow[i]);\n          }\n        }\n\n        while (nonZeroRow.length < this.size) {\n          nonZeroRow.unshift(0);\n        }\n        mergedBoard.push(nonZeroRow);\n      }\n\n      if (!this.boardsAreEqual(previousState, mergedBoard)) {\n        this.state = mergedBoard;\n        this.addRandomTile();\n        this.checkStatus();\n      }\n    }\n  }\n\n  moveUp() {\n    if (this.status === Game.statuses.PLAYING) {\n      const previousState = this.state.map((row) => [...row]);\n\n      for (let col = 0; col < this.size; col++) {\n        const newColumn = [];\n\n        for (let row = 0; row < this.size; row++) {\n          if (this.state[row][col] !== 0) {\n            newColumn.push(this.state[row][col]);\n          }\n        }\n\n        while (newColumn.length < this.size) {\n          newColumn.push(0);\n        }\n\n        for (let row = 0; row < this.size; row++) {\n          this.state[row][col] = newColumn[row];\n        }\n      }\n\n      for (let col = 0; col < this.size; col++) {\n        const newColumn = [];\n        let row = 0;\n\n        while (row < this.size) {\n          if (\n            row < this.size - 1 &&\n            this.state[row][col] === this.state[row + 1][col]\n          ) {\n            newColumn.push(this.state[row][col] * 2);\n            this.updateScore(this.state[row][col] * 2);\n            row += 2;\n          } else {\n            newColumn.push(this.state[row][col]);\n            row++;\n          }\n        }\n\n        while (newColumn.length < this.size) {\n          newColumn.push(0);\n        }\n\n        for (let r = 0; r < this.size; r++) {\n          this.state[r][col] = newColumn[r];\n        }\n      }\n\n      if (!this.boardsAreEqual(previousState, this.state)) {\n        this.addRandomTile();\n        this.checkStatus();\n      }\n    }\n  }\n\n  moveDown() {\n    if (this.status === Game.statuses.PLAYING) {\n      const previousState = this.state.map((row) => [...row]);\n\n      for (let col = 0; col < this.size; col++) {\n        const newColumn = [];\n\n        for (let row = 0; row < this.size; row++) {\n          if (this.state[row][col] !== 0) {\n            newColumn.push(this.state[row][col]);\n          }\n        }\n\n        while (newColumn.length < this.size) {\n          newColumn.unshift(0);\n        }\n\n        for (let row = 0; row < this.size; row++) {\n          this.state[row][col] = newColumn[row];\n        }\n      }\n\n      for (let col = 0; col < this.size; col++) {\n        const newColumn = [];\n        let row = this.size - 1;\n\n        while (row >= 0) {\n          if (row > 0 && this.state[row][col] === this.state[row - 1][col]) {\n            newColumn.unshift(this.state[row][col] * 2);\n            this.updateScore(this.state[row][col] * 2);\n            row -= 2;\n          } else {\n            newColumn.unshift(this.state[row][col]);\n            row--;\n          }\n        }\n\n        while (newColumn.length < this.size) {\n          newColumn.unshift(0);\n        }\n\n        for (let r = 0; r < this.size; r++) {\n          this.state[r][col] = newColumn[r];\n        }\n      }\n\n      if (!this.boardsAreEqual(previousState, this.state)) {\n        this.addRandomTile();\n        this.checkStatus();\n      }\n    }\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$parcel$interopDefault","a","__esModule","default","$a5fd07fa01589658$exports","$a5fd07fa01589658$var$Game","statuses","IDLE","PLAYING","WIN","LOSE","constructor","initialState","size","score","status","state","map","row","start","addRandomTile","restart","emptyCells","forEach","eachRow","rowIndex","cell","colIndex","push","col","length","randomIndex","Math","floor","random","getScore","getState","getStatus","updateScore","value","boardsAreEqual","previousBoard","newBoard","checkStatus","canMove","hasEmptyCells","r","c","moveLeft","previousState","movedBoard","mergedBoard","movedRow","filter","nonZeroRow","i","splice","moveRight","unshift","moveUp","newColumn","moveDown","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$updateBoard","gameField","document","querySelector","innerHTML","rowElement","createElement","classList","add","cellElement","textContent","appendChild","$09e991522ca7e64e$var$updateScore","$09e991522ca7e64e$var$gameScore","$09e991522ca7e64e$var$button","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$messageWin","addEventListener","contains","remove","e","preventDefault","key"],"version":3,"file":"index.bbb75dfe.js.map"}